{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from 'drizzle-kit';\n\nexport default defineConfig({\n  schema: './src/lib/database.ts',\n  out: './drizzle',\n  dialect: 'postgresql',\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});","size_bytes":218},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  \n  // Configuration for Tesseract.js to work in the browser\n  webpack: (config, { isServer }) => {\n    // Disable node.js specific modules in the browser\n    config.resolve.alias.canvas = false;\n    config.resolve.alias.encoding = false;\n    \n    if (!isServer) {\n      config.resolve.fallback = {\n        ...config.resolve.fallback,\n        fs: false,\n      };\n    }\n    \n    return config;\n  },\n\n  // Headers for CORS and security\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'no-cache, no-store, must-revalidate',\n          },\n        ],\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;","size_bytes":763},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};","size_bytes":82},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#eff6ff',\n          100: '#dbeafe',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8',\n        },\n        secondary: {\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          500: '#64748b',\n          600: '#475569',\n          700: '#334155',\n        },\n      },\n      fontFamily: {\n        sans: ['Inter', 'ui-sans-serif', 'system-ui', 'sans-serif'],\n      },\n      animation: {\n        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n      },\n    },\n  },\n  plugins: [],\n};","size_bytes":813},"task.md":{"content":"Task to be done:\nStudy new tools for integration needs\nStart new project, add styling\nConnect to data and file storage   <----\nBuild main structure with navigation\nCreate start page with scan button\nAdd page to take pictures\nExtract text from pictures\nSave images and extracted text\nList saved documents with previews\nShow document text and image\nClean up look with simple style\nWrite guide for setup and use\nCheck app and prepare for launch","size_bytes":441},"src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n\n/* Base styles */\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml,\nbody {\n  max-width: 100vw;\n  overflow-x: hidden;\n  font-family: 'Inter', sans-serif;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: linear-gradient(\n      to bottom,\n      transparent,\n      rgb(var(--background-end-rgb))\n    )\n    rgb(var(--background-start-rgb));\n}\n\n:root {\n  --foreground-rgb: 0, 0, 0;\n  --background-start-rgb: 249, 250, 251;\n  --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-start-rgb: 15, 23, 42;\n    --background-end-rgb: 2, 6, 23;\n  }\n}\n\n/* Custom scrollbar for better UX */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-100 dark:bg-gray-800;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-300 dark:bg-gray-600 rounded;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-400 dark:bg-gray-500;\n}\n\n/* Utility classes */\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}","size_bytes":1104},"src/app/layout.tsx":{"content":"import type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport React from 'react';\nimport './globals.css';\nimport Navigation from '../components/Navigation';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Document Scanner - OCR Web App',\n  description: 'Scan and extract text from documents using your camera and OCR technology',\n  keywords: ['OCR', 'document scanner', 'text extraction', 'camera', 'mobile'],\n  authors: [{ name: 'Document Scanner' }],\n};\n\nexport const viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  themeColor: '#3b82f6',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-slate-900 dark:to-slate-800\">\n          <Navigation />\n          <main className=\"container mx-auto px-4 py-8\">\n            {children}\n          </main>\n        </div>\n      </body>\n    </html>\n  );\n}","size_bytes":1079},"src/app/page.tsx":{"content":"'use client';\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\n\nexport default function HomePage() {\n  const [isNavigating, setIsNavigating] = useState(false);\n  const router = useRouter();\n\n  const handleStartScanning = async () => {\n    setIsNavigating(true);\n    router.push('/scan');\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto text-center\">\n      {/* Hero Section */}\n      <div className=\"mb-12\">\n        <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n          Scan Documents \n          <span className=\"block text-primary-600 dark:text-primary-400\">\n            Extract Text\n          </span>\n        </h1>\n        <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto leading-relaxed\">\n          Use your device camera to capture documents and automatically extract text using advanced OCR technology. \n          Perfect for digitizing receipts, notes, and important documents.\n        </p>\n      </div>\n\n      {/* Features Grid */}\n      <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow\">\n          <div className=\"text-4xl mb-4\">üì∑</div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n            Camera Capture\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Access your device camera to capture high-quality images of documents\n          </p>\n        </div>\n\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow\">\n          <div className=\"text-4xl mb-4\">ü§ñ</div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n            OCR Processing\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Advanced text recognition to extract content from your scanned documents\n          </p>\n        </div>\n\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow\">\n          <div className=\"text-4xl mb-4\">üíæ</div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n            Cloud Storage\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Securely store your documents and extracted text in the cloud\n          </p>\n        </div>\n      </div>\n\n      {/* CTA Button */}\n      <div className=\"space-y-4\">\n        <button \n          onClick={handleStartScanning}\n          disabled={isNavigating}\n          className=\"inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-white bg-primary-600 hover:bg-primary-700 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1 disabled:opacity-70 disabled:cursor-not-allowed\"\n        >\n          {isNavigating ? (\n            <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n          ) : (\n            <span className=\"mr-2 text-xl\">üì∏</span>\n          )}\n          {isNavigating ? 'Loading...' : 'Start Scanning Documents'}\n        </button>\n        \n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n          No sign-up required to try ‚Ä¢ Works on mobile and desktop\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":3825},"src/components/Navigation.tsx":{"content":"'use client';\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nconst Navigation = () => {\n  const pathname = usePathname();\n  \n  const navLinks = [\n    { href: '/', label: 'Home', icon: 'üè†' },\n    { href: '/scan', label: 'Scan', icon: 'üì∑' },\n    { href: '/dashboard', label: 'Dashboard', icon: 'üìã' },\n  ];\n\n  return (\n    <nav className=\"bg-white dark:bg-slate-800 shadow-lg border-b border-gray-200 dark:border-slate-700\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link \n            href=\"/\" \n            className=\"flex items-center space-x-2 text-xl font-bold text-primary-600 hover:text-primary-700 transition-colors\"\n          >\n            <span className=\"text-2xl\">üìÑ</span>\n            <span>DocScan</span>\n          </Link>\n\n          {/* Navigation Links */}\n          <div className=\"flex space-x-1\">\n            {navLinks.map((link) => {\n              const isActive = pathname === link.href;\n              return (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={`\n                    flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200\n                    ${\n                      isActive\n                        ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-300'\n                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-300 dark:hover:text-white dark:hover:bg-slate-700'\n                    }\n                  `}\n                >\n                  <span className=\"text-base\">{link.icon}</span>\n                  <span className=\"hidden sm:inline\">{link.label}</span>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;","size_bytes":1988},"src/lib/database.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { pgTable, uuid, text, timestamp, varchar } from 'drizzle-orm/pg-core';\n\n// Database connection\nconst connectionString = process.env.DATABASE_URL;\nif (!connectionString) {\n  throw new Error('DATABASE_URL environment variable is not set');\n}\n\nconst client = postgres(connectionString, { prepare: false });\nexport const db = drizzle(client);\n\n// Schema for documents table\nexport const docs = pgTable('docs', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: varchar('user_id', { length: 255 }).notNull(),\n  objectKey: text('object_key').notNull(), // Store storage object key instead of signed URL\n  extractedText: text('extracted_text').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Types\nexport type Doc = typeof docs.$inferSelect;\nexport type NewDoc = typeof docs.$inferInsert;","size_bytes":913},"src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\n// Client for public operations\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);","size_bytes":384},"src/lib/tesseract.ts":{"content":"import { createWorker } from 'tesseract.js';\n\n// Configure Tesseract worker paths for production builds\nexport const createTesseractWorker = async (language = 'eng') => {\n  const worker = await createWorker(language, 1, {\n    workerPath: 'https://cdn.jsdelivr.net/npm/tesseract.js@6/dist/worker.min.js',\n    langPath: 'https://tessdata.projectnaptha.com/4.0.0',\n    corePath: 'https://cdn.jsdelivr.net/npm/tesseract.js-core@6/tesseract-core.wasm.js',\n    logger: (m) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Tesseract:', m);\n      }\n    },\n  });\n\n  return worker;\n};\n\n// Helper function for common OCR operations\nexport const extractTextFromImage = async (image: File | string, language = 'eng') => {\n  const worker = await createTesseractWorker(language);\n  \n  try {\n    const { data: { text } } = await worker.recognize(image);\n    return text;\n  } finally {\n    await worker.terminate();\n  }\n};","size_bytes":934},"src/app/dashboard/page.tsx":{"content":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { type Doc } from '../../lib/database';\n\n// Type for documents with signed URLs from API\ntype DocumentWithUrl = Doc & { fileUrl?: string };\n\nconst DashboardPage = () => {\n  const [documents, setDocuments] = useState<DocumentWithUrl[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isNavigating, setIsNavigating] = useState(false);\n  const router = useRouter();\n\n  const handleScanNew = () => {\n    setIsNavigating(true);\n    router.push('/scan');\n  };\n\n  useEffect(() => {\n    loadDocuments();\n  }, []);\n\n  const loadDocuments = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/document?userId=temp-user');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch documents');\n      }\n      \n      const result = await response.json();\n      setDocuments(result.documents);\n    } catch (err) {\n      console.error('Load documents error:', err);\n      setError('Failed to load documents');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(date));\n  };\n\n  const truncateText = (text: string, maxLength = 100) => {\n    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Document Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\n            Manage your scanned documents and extracted text\n          </p>\n        </div>\n        \n        <button\n          onClick={handleScanNew}\n          disabled={isNavigating}\n          className=\"bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700 transition-colors flex items-center disabled:opacity-70\"\n        >\n          {isNavigating ? (\n            <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n          ) : (\n            <span className=\"mr-2\">üì∏</span>\n          )}\n          {isNavigating ? 'Loading...' : 'Scan New Document'}\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n          {error}\n        </div>\n      )}\n\n      {/* Documents Grid */}\n      {documents.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-6xl mb-4\">üìÑ</div>\n          <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-2\">\n            No documents yet\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n            Start by scanning your first document to see it here\n          </p>\n          <Link\n            href=\"/scan\"\n            className=\"inline-flex items-center bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700 transition-colors\"\n          >\n            <span className=\"mr-2\">üì∏</span>\n            Scan Your First Document\n          </Link>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {documents.map((doc) => (\n            <div\n              key={doc.id}\n              className=\"bg-white dark:bg-slate-800 rounded-xl shadow-md hover:shadow-lg transition-shadow overflow-hidden\"\n            >\n              {/* Document Image */}\n              <div className=\"aspect-video bg-gray-100 dark:bg-slate-700 flex items-center justify-center\">\n                {doc.fileUrl ? (\n                  <img\n                    src={doc.fileUrl}\n                    alt=\"Document thumbnail\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"text-4xl text-gray-400\">üìÑ</div>\n                )}\n              </div>\n\n              {/* Document Info */}\n              <div className=\"p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h3 className=\"font-semibold text-gray-900 dark:text-white text-sm\">\n                    Document {doc.id.slice(0, 8)}...\n                  </h3>\n                  <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {formatDate(doc.createdAt)}\n                  </span>\n                </div>\n\n                <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4 leading-relaxed\">\n                  {truncateText(doc.extractedText)}\n                </p>\n\n                <div className=\"flex space-x-2\">\n                  <Link\n                    href={`/doc/${doc.id}`}\n                    className=\"flex-1 bg-blue-600 text-white text-sm py-2 px-3 rounded text-center hover:bg-blue-700 transition-colors\"\n                  >\n                    View Full\n                  </Link>\n                  <button\n                    onClick={() => navigator.clipboard.writeText(doc.extractedText)}\n                    className=\"flex-1 border border-gray-300 dark:border-slate-600 text-gray-700 dark:text-gray-300 text-sm py-2 px-3 rounded hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors\"\n                  >\n                    Copy Text\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Stats */}\n      {documents.length > 0 && (\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n          <h2 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">\n            Statistics\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary-600\">\n                {documents.length}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Total Documents\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {documents.reduce((acc, doc) => acc + doc.extractedText.length, 0)}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Characters Extracted\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {documents.reduce((acc, doc) => acc + doc.extractedText.split(' ').length, 0)}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Words Extracted\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardPage;","size_bytes":7830},"src/app/scan/page.tsx":{"content":"'use client';\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { createTesseractWorker } from '../../lib/tesseract';\nimport { useRouter } from 'next/navigation';\nimport CameraDialog from '../../components/CameraDialog';\n\nconst ScanPage = () => {\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [extractedText, setExtractedText] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n  const [isSaving, setIsSaving] = useState(false);\n  const [isCameraDialogOpen, setIsCameraDialogOpen] = useState(false);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const router = useRouter();\n\n  const handleCameraCapture = (imageData: string) => {\n    setCapturedImage(imageData);\n    setIsCameraDialogOpen(false);\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const processOCR = useCallback(async () => {\n    if (!capturedImage) return;\n    \n    setIsProcessing(true);\n    setProgress(0);\n    setError('');\n    \n    try {\n      const worker = await createTesseractWorker('eng');\n      \n      // Set up progress tracking\n      const progressHandler = (m: any) => {\n        if (m.status === 'recognizing text') {\n          setProgress(Math.round(m.progress * 100));\n        }\n      };\n\n      // Override the logger temporarily\n      const { data: { text } } = await worker.recognize(capturedImage);\n      \n      if (!text.trim()) {\n        setError('No text found in the image. Try a clearer image with better lighting.');\n        return;\n      }\n\n      setExtractedText(text);\n      await worker.terminate();\n    } catch (err) {\n      console.error('OCR processing error:', err);\n      setError('Failed to extract text from image. Please try again.');\n    } finally {\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  }, [capturedImage]);\n\n  const saveDocument = async () => {\n    if (!capturedImage || !extractedText) return;\n    \n    try {\n      setIsSaving(true);\n      \n      // Convert base64 to blob\n      const base64Data = capturedImage.split(',')[1];\n      const byteCharacters = atob(base64Data);\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      const blob = new Blob([byteArray], { type: 'image/jpeg' });\n      \n      // Create file\n      const fileName = `document_${Date.now()}.jpg`;\n      const file = new File([blob], fileName, { type: 'image/jpeg' });\n      \n      // Upload file using API\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const uploadResponse = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!uploadResponse.ok) {\n        throw new Error('Failed to upload file');\n      }\n      \n      const uploadResult = await uploadResponse.json();\n      \n      // Save document to database using API\n      const saveResponse = await fetch('/api/document', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: 'temp-user', // TODO: Replace with actual user ID from auth\n          objectKey: uploadResult.fileName,\n          extractedText,\n        }),\n      });\n      \n      if (!saveResponse.ok) {\n        throw new Error('Failed to save document');\n      }\n      \n      // Redirect to dashboard\n      router.push('/dashboard');\n    } catch (err) {\n      console.error('Save error:', err);\n      setError('Failed to save document. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const resetScan = () => {\n    setCapturedImage(null);\n    setExtractedText('');\n    setError('');\n    setProgress(0);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Scan Document\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          Capture or upload a document to extract text using OCR\n        </p>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n          {error}\n        </div>\n      )}\n\n      {!capturedImage && (\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Camera Option */}\n          <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n              <span className=\"mr-2\">üì∑</span>\n              Use Camera\n            </h2>\n            \n            <button\n              onClick={() => setIsCameraDialogOpen(true)}\n              className=\"w-full bg-primary-600 text-white py-3 px-4 rounded-lg hover:bg-primary-700 transition-colors flex items-center justify-center\"\n            >\n              <span className=\"mr-2 text-lg\">üì∑</span>\n              Open Camera\n            </button>\n          </div>\n\n          {/* File Upload Option */}\n          <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n              <span className=\"mr-2\">üìÅ</span>\n              Upload File\n            </h2>\n            \n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileUpload}\n                className=\"hidden\"\n                id=\"file-upload\"\n              />\n              <label\n                htmlFor=\"file-upload\"\n                className=\"cursor-pointer flex flex-col items-center\"\n              >\n                <span className=\"text-4xl mb-2\">üìÑ</span>\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Click to select an image file\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Captured Image Preview */}\n      {capturedImage && (\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold\">Captured Document</h2>\n            <button\n              onClick={resetScan}\n              className=\"text-red-600 hover:text-red-700 px-3 py-1 border border-red-600 rounded hover:bg-red-50\"\n            >\n              Reset\n            </button>\n          </div>\n          \n          <div className=\"flex justify-center mb-4\">\n            <img\n              src={capturedImage}\n              alt=\"Captured document\"\n              className=\"max-w-full max-h-96 object-contain rounded-lg border\"\n            />\n          </div>\n\n          {!extractedText && !isProcessing && (\n            <button\n              onClick={processOCR}\n              disabled={isProcessing}\n              className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-70 disabled:cursor-not-allowed flex items-center justify-center\"\n            >\n              {isProcessing ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Extracting...\n                </>\n              ) : (\n                'Extract Text'\n              )}\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Processing Progress */}\n      {isProcessing && (\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-sm font-medium text-blue-700\">Processing...</span>\n            <span className=\"text-sm font-medium text-blue-700\">{progress}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${progress}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Extracted Text */}\n      {extractedText && (\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold\">Extracted Text</h2>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => navigator.clipboard.writeText(extractedText)}\n                className=\"text-blue-600 hover:text-blue-700 px-3 py-1 border border-blue-600 rounded hover:bg-blue-50\"\n              >\n                Copy\n              </button>\n              <button\n                onClick={saveDocument}\n                disabled={isSaving || isProcessing}\n                className=\"bg-green-600 text-white px-4 py-1 rounded hover:bg-green-700 disabled:bg-green-300 transition-colors flex items-center\"\n              >\n                {isSaving ? (\n                  <>\n                    <svg className=\"animate-spin -ml-1 mr-2 h-3 w-3 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    Saving...\n                  </>\n                ) : (\n                  'Save Document'\n                )}\n              </button>\n            </div>\n          </div>\n          \n          <textarea\n            value={extractedText}\n            onChange={(e) => setExtractedText(e.target.value)}\n            className=\"w-full h-40 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none dark:bg-slate-700 dark:border-slate-600 dark:text-white\"\n            placeholder=\"Extracted text will appear here...\"\n          />\n        </div>\n      )}\n\n      <CameraDialog \n        isOpen={isCameraDialogOpen}\n        onClose={() => setIsCameraDialogOpen(false)}\n        onCapture={handleCameraCapture}\n      />\n    </div>\n  );\n};\n\nexport default ScanPage;","size_bytes":11337},"src/app/doc/[id]/page.tsx":{"content":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { type Doc } from '../../../lib/database';\n\nconst DocumentDetailPage = () => {\n  const params = useParams();\n  const router = useRouter();\n  const [document, setDocument] = useState<Doc | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedText, setEditedText] = useState('');\n\n  useEffect(() => {\n    if (params.id) {\n      loadDocument(params.id as string);\n    }\n  }, [params.id]);\n\n  const loadDocument = async (id: string) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/document/${id}`);\n      \n      if (!response.ok) {\n        setError('Document not found');\n        return;\n      }\n      \n      const result = await response.json();\n      setDocument(result.document);\n      setEditedText(result.document.extractedText);\n    } catch (err) {\n      console.error('Load document error:', err);\n      setError('Failed to load document');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveChanges = async () => {\n    if (!document) return;\n    \n    try {\n      const response = await fetch(`/api/document/${document.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          extractedText: editedText,\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update document');\n      }\n      \n      setDocument({ ...document, extractedText: editedText });\n      setIsEditing(false);\n    } catch (err) {\n      console.error('Save error:', err);\n      setError('Failed to save changes');\n    }\n  };\n\n  const deleteDocument = async () => {\n    if (!document || !confirm('Are you sure you want to delete this document?')) return;\n    \n    try {\n      const response = await fetch(`/api/document/${document.id}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to delete document');\n      }\n      \n      router.push('/dashboard');\n    } catch (err) {\n      console.error('Delete error:', err);\n      setError('Failed to delete document');\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(date));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !document) {\n    return (\n      <div className=\"max-w-4xl mx-auto text-center py-12\">\n        <div className=\"text-6xl mb-4\">‚ùå</div>\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          {error || 'Document not found'}\n        </h1>\n        <button\n          onClick={() => router.push('/dashboard')}\n          className=\"bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700 transition-colors\"\n        >\n          Back to Dashboard\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <button\n            onClick={() => router.push('/dashboard')}\n            className=\"flex items-center text-primary-600 hover:text-primary-700 mb-2\"\n          >\n            <span className=\"mr-1\">‚Üê</span>\n            Back to Dashboard\n          </button>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Document Details\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\n            Scanned on {formatDate(document.createdAt)}\n          </p>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          {!isEditing ? (\n            <>\n              <button\n                onClick={() => setIsEditing(true)}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                Edit Text\n              </button>\n              <button\n                onClick={() => navigator.clipboard.writeText(document.extractedText)}\n                className=\"border border-gray-300 dark:border-slate-600 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors\"\n              >\n                Copy Text\n              </button>\n              <button\n                onClick={deleteDocument}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n              >\n                Delete\n              </button>\n            </>\n          ) : (\n            <>\n              <button\n                onClick={saveChanges}\n                className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors\"\n              >\n                Save Changes\n              </button>\n              <button\n                onClick={() => {\n                  setIsEditing(false);\n                  setEditedText(document.extractedText);\n                }}\n                className=\"border border-gray-300 dark:border-slate-600 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors\"\n              >\n                Cancel\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n          {error}\n        </div>\n      )}\n\n      {/* Document Image */}\n      {document.fileUrl && (\n        <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\n            Original Document\n          </h2>\n          <div className=\"flex justify-center\">\n            <img\n              src={document.fileUrl}\n              alt=\"Original document\"\n              className=\"max-w-full max-h-96 object-contain rounded-lg border shadow-sm\"\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Extracted Text */}\n      <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\n          Extracted Text\n        </h2>\n        \n        {isEditing ? (\n          <textarea\n            value={editedText}\n            onChange={(e) => setEditedText(e.target.value)}\n            className=\"w-full h-96 p-4 border border-gray-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none dark:bg-slate-700 dark:text-white font-mono text-sm leading-relaxed\"\n            placeholder=\"Edit the extracted text...\"\n          />\n        ) : (\n          <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n            <pre className=\"whitespace-pre-wrap bg-gray-50 dark:bg-slate-700 p-4 rounded-lg border font-mono text-sm leading-relaxed\">\n              {document.extractedText}\n            </pre>\n          </div>\n        )}\n      </div>\n\n      {/* Document Metadata */}\n      <div className=\"bg-white dark:bg-slate-800 p-6 rounded-xl shadow-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\n          Document Information\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"font-medium text-gray-700 dark:text-gray-300\">Document ID:</span>\n            <span className=\"ml-2 text-gray-600 dark:text-gray-400 font-mono\">\n              {document.id}\n            </span>\n          </div>\n          <div>\n            <span className=\"font-medium text-gray-700 dark:text-gray-300\">Created:</span>\n            <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\n              {formatDate(document.createdAt)}\n            </span>\n          </div>\n          <div>\n            <span className=\"font-medium text-gray-700 dark:text-gray-300\">Text Length:</span>\n            <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\n              {document.extractedText.length} characters\n            </span>\n          </div>\n          <div>\n            <span className=\"font-medium text-gray-700 dark:text-gray-300\">Word Count:</span>\n            <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\n              {document.extractedText.split(/\\s+/).filter(word => word.length > 0).length} words\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentDetailPage;","size_bytes":8958},"replit.md":{"content":"# Document Scanner Web App\n\n## Overview\n\nA web-based document scanning application that allows users to capture images of documents using their device camera and extract text using OCR (Optical Character Recognition) technology. The app is built with Next.js, uses Tesseract.js for OCR processing, and stores documents and extracted text in a PostgreSQL database with file storage via Supabase.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Next.js 14 with TypeScript for type safety and modern React features\n- **Styling**: Tailwind CSS with custom color scheme and dark mode support\n- **UI Components**: Custom React components with responsive design\n- **State Management**: React hooks for local state management\n- **Navigation**: Next.js App Router with client-side navigation\n\n### Backend Architecture\n- **API Routes**: Next.js API routes for document management and file uploads\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **File Processing**: Server-side image processing and validation\n- **Error Handling**: Comprehensive error handling with user-friendly messages\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM schema\n- **File Storage**: Supabase Storage for document images\n- **Schema Design**: \n  - Documents table with UUID primary keys\n  - User-based document organization\n  - Extracted text storage alongside metadata\n\n### Authentication and Authorization\n- **User Identification**: Simple user ID based system\n- **Data Isolation**: User-specific document retrieval\n- **File Access**: Signed URLs for secure document access with time-based expiration\n\n### OCR Processing\n- **Engine**: Tesseract.js for client-side OCR processing\n- **Configuration**: CDN-based worker and language files for production reliability\n- **Processing Flow**: Image capture ‚Üí OCR extraction ‚Üí database storage\n- **Language Support**: Configurable language detection (default: English)\n\n### Camera Integration\n- **Media Capture**: WebRTC getUserMedia API for camera access\n- **Image Processing**: HTML5 Canvas for image manipulation\n- **Device Support**: Responsive design for both mobile and desktop\n- **Fallback Options**: File upload alternative for devices without camera access\n\n## External Dependencies\n\n### Core Services\n- **Supabase**: Used for file storage and potentially authentication (configured for both client and server-side operations)\n- **PostgreSQL**: Primary database for document metadata and extracted text storage\n\n### OCR and Processing\n- **Tesseract.js**: Client-side OCR engine with CDN-hosted workers and language data\n- **Canvas API**: Browser-native image processing capabilities\n\n### Development Tools\n- **Drizzle Kit**: Database schema management and migrations\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESLint**: Code quality and consistency enforcement\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom theme\n- **Inter Font**: Google Fonts integration for consistent typography\n- **Autoprefixer**: CSS vendor prefix management\n\n### Utilities\n- **nanoid**: Unique identifier generation for file naming\n- **postgres**: Direct PostgreSQL client for database connections","size_bytes":3308},"src/server/supabase.ts":{"content":"import 'server-only';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl) {\n  throw new Error('NEXT_PUBLIC_SUPABASE_URL environment variable is required');\n}\n\nif (!supabaseServiceKey) {\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY environment variable is required');\n}\n\n// Server-side client for secure operations (file uploads, etc.)\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false\n  }\n});\n\n// Generate signed URL for secure document access\nexport const getDocumentSignedUrl = async (objectKey: string) => {\n  const { data, error } = await supabaseAdmin.storage\n    .from('documents')\n    .createSignedUrl(objectKey, 3600); // 1 hour expiry\n\n  if (error) throw error;\n  return data.signedUrl;\n};\n\n// Upload file to storage\nexport const uploadDocument = async (file: ArrayBuffer, fileName: string, contentType: string) => {\n  const { data, error } = await supabaseAdmin.storage\n    .from('documents')\n    .upload(fileName, file, {\n      contentType,\n      duplex: 'half'\n    });\n\n  if (error) throw error;\n  return data;\n};","size_bytes":1263},"src/app/api/document/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { db, docs } from '@/lib/database';\nimport { eq } from 'drizzle-orm';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId, objectKey, extractedText } = await request.json();\n    \n    if (!userId || !objectKey || !extractedText) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    // Save document record to database\n    const newDoc = await db.insert(docs).values({\n      userId,\n      objectKey,\n      extractedText\n    }).returning();\n\n    return NextResponse.json({\n      document: newDoc[0],\n      message: 'Document saved successfully'\n    });\n\n  } catch (error) {\n    console.error('Document save error:', error);\n    return NextResponse.json({ error: 'Failed to save document' }, { status: 500 });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'User ID is required' }, { status: 400 });\n    }\n\n    // Get user's documents\n    const userDocs = await db.select().from(docs)\n      .where(eq(docs.userId, userId))\n      .orderBy(docs.createdAt);\n\n    // Generate file URLs for local storage\n    const docsWithUrls = userDocs.map((doc) => {\n      return {\n        ...doc,\n        fileUrl: `/api/uploads/${doc.objectKey}`\n      };\n    });\n\n    return NextResponse.json({ documents: docsWithUrls });\n\n  } catch (error) {\n    console.error('Documents fetch error:', error);\n    return NextResponse.json({ error: 'Failed to fetch documents' }, { status: 500 });\n  }\n}","size_bytes":1685},"src/app/api/upload/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { nanoid } from 'nanoid';\nimport { writeFile, mkdir } from 'fs/promises';\nimport { join } from 'path';\nimport { existsSync } from 'fs';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    \n    if (!file) {\n      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\n    }\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      return NextResponse.json({ error: 'Only image files are allowed' }, { status: 400 });\n    }\n\n    // Validate file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      return NextResponse.json({ error: 'File size must be less than 10MB' }, { status: 400 });\n    }\n\n    // Generate unique filename\n    const fileExtension = file.name.split('.').pop();\n    const fileName = `${nanoid()}.${fileExtension}`;\n    \n    // Convert file to buffer\n    const buffer = await file.arrayBuffer();\n    const uint8Array = new Uint8Array(buffer);\n    \n    // Create uploads directory if it doesn't exist\n    const uploadsDir = join(process.cwd(), 'uploads');\n    if (!existsSync(uploadsDir)) {\n      await mkdir(uploadsDir, { recursive: true });\n    }\n    \n    // Save file locally\n    const filePath = join(uploadsDir, fileName);\n    await writeFile(filePath, uint8Array);\n\n    return NextResponse.json({\n      fileName: fileName,\n      objectKey: fileName,\n      filePath: `/uploads/${fileName}`,\n      message: 'File uploaded successfully'\n    });\n\n  } catch (error) {\n    console.error('Upload error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}","size_bytes":1735},"src/app/api/document/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { db, docs } from '@/lib/database';\nimport { getDocumentSignedUrl } from '@/server/supabase';\nimport { eq } from 'drizzle-orm';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { id } = params;\n    \n    // Get document from database\n    const result = await db.select().from(docs)\n      .where(eq(docs.id, id))\n      .limit(1);\n    \n    if (result.length === 0) {\n      return NextResponse.json({ error: 'Document not found' }, { status: 404 });\n    }\n\n    const document = result[0];\n\n    // Generate signed URL for document access\n    const fileUrl = await getDocumentSignedUrl(document.objectKey);\n\n    return NextResponse.json({\n      document: {\n        ...document,\n        fileUrl\n      }\n    });\n\n  } catch (error) {\n    console.error('Document fetch error:', error);\n    return NextResponse.json({ error: 'Failed to fetch document' }, { status: 500 });\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { id } = params;\n    const { extractedText } = await request.json();\n    \n    if (!extractedText) {\n      return NextResponse.json({ error: 'Extracted text is required' }, { status: 400 });\n    }\n\n    // Update document in database\n    const result = await db.update(docs)\n      .set({ extractedText })\n      .where(eq(docs.id, id))\n      .returning();\n\n    if (result.length === 0) {\n      return NextResponse.json({ error: 'Document not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      document: result[0],\n      message: 'Document updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Document update error:', error);\n    return NextResponse.json({ error: 'Failed to update document' }, { status: 500 });\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { id } = params;\n    \n    // Delete document from database\n    const result = await db.delete(docs)\n      .where(eq(docs.id, id))\n      .returning();\n\n    if (result.length === 0) {\n      return NextResponse.json({ error: 'Document not found' }, { status: 404 });\n    }\n\n    // TODO: Also delete the file from Supabase storage using the objectKey\n    \n    return NextResponse.json({\n      message: 'Document deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Document delete error:', error);\n    return NextResponse.json({ error: 'Failed to delete document' }, { status: 500 });\n  }\n}","size_bytes":2587},"src/components/CameraDialog.tsx":{"content":"'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\n\ninterface CameraDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCapture: (imageData: string) => void;\n}\n\nconst CameraDialog: React.FC<CameraDialogProps> = ({ isOpen, onClose, onCapture }) => {\n  const [isCamera, setIsCamera] = useState(false);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [isStartingCamera, setIsStartingCamera] = useState(false);\n  const [error, setError] = useState('');\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  const startCamera = async () => {\n    try {\n      setIsStartingCamera(true);\n      setError('');\n      const constraints = {\n        video: {\n          facingMode: { ideal: 'environment' }, // Prefer rear camera\n          width: { ideal: 1280, max: 1920 },\n          height: { ideal: 720, max: 1080 }\n        }\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      streamRef.current = stream;\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n        setIsCamera(true);\n      }\n    } catch (err) {\n      console.error('Camera access error:', err);\n      setError('Unable to access camera. Please check permissions.');\n    } finally {\n      setIsStartingCamera(false);\n    }\n  };\n\n  const stopCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    setIsCamera(false);\n  };\n\n  const captureImage = () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    \n    if (video && canvas) {\n      const context = canvas.getContext('2d');\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      \n      if (context) {\n        context.drawImage(video, 0, 0);\n        const imageData = canvas.toDataURL('image/jpeg', 0.8);\n        setCapturedImage(imageData);\n        stopCamera();\n      }\n    }\n  };\n\n  const retakePhoto = () => {\n    setCapturedImage(null);\n    startCamera();\n  };\n\n  const usePhoto = () => {\n    if (capturedImage) {\n      onCapture(capturedImage);\n      handleClose();\n    }\n  };\n\n  const handleClose = () => {\n    stopCamera();\n    setCapturedImage(null);\n    setError('');\n    onClose();\n  };\n\n  // Start camera when dialog opens\n  useEffect(() => {\n    if (isOpen && !isCamera && !capturedImage) {\n      startCamera();\n    }\n  }, [isOpen]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopCamera();\n    };\n  }, []);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white dark:bg-slate-800 rounded-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b border-gray-200 dark:border-slate-600\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n            üì∑ Camera\n          </h2>\n          <button\n            onClick={handleClose}\n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl\"\n          >\n            √ó\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4\">\n              {error}\n            </div>\n          )}\n\n          {/* Camera Loading State */}\n          {isStartingCamera && (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n              <p className=\"text-gray-600 dark:text-gray-300\">Starting camera...</p>\n            </div>\n          )}\n\n          {/* Live Camera Feed */}\n          {isCamera && !capturedImage && (\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <video\n                  ref={videoRef}\n                  className=\"w-full rounded-lg border-2 border-primary-300\"\n                  autoPlay\n                  playsInline\n                  muted\n                />\n                <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 text-center\">\n                  <p className=\"text-white bg-black bg-opacity-50 px-3 py-2 rounded text-sm\">\n                    üìÑ Position your document in the frame\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-center space-x-4\">\n                <button\n                  onClick={captureImage}\n                  className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center font-semibold\"\n                >\n                  <span className=\"mr-2 text-lg\">üì∏</span>\n                  Capture\n                </button>\n                <button\n                  onClick={handleClose}\n                  className=\"bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Captured Image Preview */}\n          {capturedImage && (\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-center\">\n                <img\n                  src={capturedImage}\n                  alt=\"Captured document\"\n                  className=\"max-w-full max-h-96 object-contain rounded-lg border\"\n                />\n              </div>\n              \n              <div className=\"flex justify-center space-x-4\">\n                <button\n                  onClick={usePhoto}\n                  className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center font-semibold\"\n                >\n                  <span className=\"mr-2\">‚úì</span>\n                  Use Photo\n                </button>\n                <button\n                  onClick={retakePhoto}\n                  className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center\"\n                >\n                  <span className=\"mr-2\">‚Üª</span>\n                  Retake\n                </button>\n                <button\n                  onClick={handleClose}\n                  className=\"bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          )}\n\n          <canvas ref={canvasRef} className=\"hidden\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CameraDialog;","size_bytes":6974},"src/app/api/uploads/[filename]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { readFile } from 'fs/promises';\nimport { join } from 'path';\nimport { existsSync } from 'fs';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { filename: string } }\n) {\n  try {\n    const { filename } = params;\n    \n    // Sanitize filename to prevent directory traversal (preserve underscores for nanoid)\n    const sanitizedFilename = filename.replace(/[^a-zA-Z0-9._-]/g, '');\n    \n    const filePath = join(process.cwd(), 'uploads', sanitizedFilename);\n    \n    if (!existsSync(filePath)) {\n      return new NextResponse('File not found', { status: 404 });\n    }\n\n    const fileBuffer = await readFile(filePath);\n    \n    // Determine content type based on file extension\n    const extension = sanitizedFilename.split('.').pop()?.toLowerCase();\n    let contentType = 'application/octet-stream';\n    \n    switch (extension) {\n      case 'jpg':\n      case 'jpeg':\n        contentType = 'image/jpeg';\n        break;\n      case 'png':\n        contentType = 'image/png';\n        break;\n      case 'gif':\n        contentType = 'image/gif';\n        break;\n      case 'webp':\n        contentType = 'image/webp';\n        break;\n    }\n\n    return new NextResponse(fileBuffer, {\n      headers: {\n        'Content-Type': contentType,\n        'Cache-Control': 'public, max-age=31536000'\n      }\n    });\n\n  } catch (error) {\n    console.error('File serve error:', error);\n    return new NextResponse('Internal server error', { status: 500 });\n  }\n}","size_bytes":1528}},"version":1}